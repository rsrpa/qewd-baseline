module.exports = function(messageObj, session, send, finished) {

  if (!session.authenticated) {
    return finished({error: 'Unauthenticated'});
  }

  if (!messageObj.params) {
    return finished({error: 'Invalid request'});
  }

  let documentName = messageObj.params.documentName;
  if (!documentName || documentName === '') {
    return finished({error: 'Invalid request'});
  }

  let path = messageObj.params.path;
  if (!path || !Array.isArray(path)) {
    return finished({error: 'Invalid request'});
  }

  let idCounter = messageObj.params.idCounter;
  if (!idCounter || idCounter === '') {
    return finished({error: 'Invalid request'});
  }

  let parentNodeId = messageObj.params.parentNodeId;
  if (!parentNodeId || parentNodeId === '') {
    return finished({error: 'Invalid request'});
  }

  let doc = this.db.use(documentName, ...path);

  console.log(JSON.stringify(doc, null, 2));

  let nodes = [];
  let max = 8;
  let count = 0;
  let node;

  if (messageObj.params.moreSiblings) {
    idCounter++;
    node = {
      nodeId: idCounter,
      documentName: documentName,
      path: path,
      morePreviousSiblings: true,
      seed: messageObj.params.seed,
      parentNodeId: parentNodeId,
      subscript: '<== Previous sibling nodes'
    };
    nodes.push(node);

    doc.forEachChild({range: {from: messageObj.params.seed}}, function(index, child) {
      let node;
      idCounter++;
      count++;
      if (count > max) {
        node = {
          nodeId: idCounter,
          documentName: documentName,
          path: path,
          moreSiblings: true,
          seed: index,
          parentNodeId: parentNodeId,
          subscript: 'More sibling nodes ==>'
        };
        nodes.push(node);
        return true;
      }
      node = {
        nodeId: idCounter,
        documentName: documentName,
        path: child.path,
        parentNodeId: parentNodeId,
        subscript: index,
        leafNode: !child.hasChildren,
        value: child.value,
        childrenFetched: false
      };
      nodes.push(node);
    });

    return finished({
      nodes: nodes,
      idCounter: idCounter
    });
  }

  if (messageObj.params.morePreviousSiblings) {


    console.log('begin reverse retrieval from ' + messageObj.params.seed);

    let child = doc.$(messageObj.params.seed);

    // check if there's a next sibling for the seed node

    let nextSibling = child.nextSibling;
    if (nextSibling) {
      idCounter++;
      node = {
        nodeId: idCounter,
        documentName: documentName,
        path: path,
        moreSiblings: true,
        seed: nextSibling.name,
        parentNodeId: parentNodeId,
        subscript: 'More sibling nodes ==>'
      };
      nodes.push(node);
    }

    idCounter++;
    node = {
      nodeId: idCounter,
      documentName: documentName,
      path: child.path,
      parentNodeId: parentNodeId,
      subscript: messageObj.params.seed,
      leafNode: !child.hasChildren,
      value: child.value,
      childrenFetched: false
    };
    nodes.unshift(node);

    let ok = true;
    do {
      child = child.previousSibling;
      if (!child) {
        ok = false;
      }
      else {
        count++;
        idCounter++;
        if (count > max) {
          node = {
            nodeId: idCounter,
            documentName: documentName,
            path: path,
            morePreviousSiblings: true,
            seed: child.name,
            parentNodeId: parentNodeId,
            subscript: '<== Previous sibling nodes'
          };
          nodes.unshift(node);
          ok = false;
        }
        else {
          node = {
            nodeId: idCounter,
            documentName: documentName,
            path: child.path,
            parentNodeId: parentNodeId,
            subscript: child.name,
            leafNode: !child.hasChildren,
            value: child.value,
            childrenFetched: false
          };
          nodes.unshift(node);
        }
      }
    }
    while (ok);

    return finished({
      nodes: nodes,
      idCounter: idCounter
    });
  }

  doc.forEachChild(function(index, child) {
    let node;
    idCounter++;
    count++;
    if (count > max) {
      node = {
        nodeId: idCounter,
        documentName: documentName,
        path: path,
        moreSiblings: true,
        seed: index,
        parentNodeId: parentNodeId,
        subscript: 'More sibling nodes ==>'
      };
      nodes.push(node);
      return true;
    }
    node = {
      nodeId: idCounter,
      documentName: documentName,
      path: child.path,
      parentNodeId: parentNodeId,
      subscript: index,
      leafNode: !child.hasChildren,
      value: child.value,
      childrenFetched: false
    };
    nodes.push(node);
  });

  finished({
    nodes: nodes,
    idCounter: idCounter
  });

};
